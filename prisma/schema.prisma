// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Users {
    id String @id @default(cuid())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    email_address String @unique
    first_name String
    last_name String
    password String
    role Roles? @default(USER)
    status Statuses? @default(NORMAL)

    reviews Reviews[]

    @@map("users")
    @@index([email_address])
}

enum Roles {
    USER
    ADMINISTRATOR
}

enum Statuses {
    NORMAL
    SUSPENDED
}

model Restaurants {
    id String @id @default(cuid())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    enabled Boolean @default(true)
    name String
    location String?
    phone_number String?
    number_of_reviews Int? @default(0)

    reviews Reviews[]

    @@map("restaurants")
    @@unique([name, phone_number])
    @@index([name])
}

model Reviews {
    id Int @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    user_id String
    restaurant_id String
    review_text String?

    users Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
    restaurants Restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

    @@map("reviews")
}
